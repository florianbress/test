# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MatchLogEntry {
  id: ID!
  type: String!
  extraData: JSON
  createdAt: Date!
  updatedAt: Date!
  proposeMatchDate: Date
  rosterId: String
  createdById: String!
  targetUserId: String
  matchId: Int!
  CreatedBy: User!
  TargetUser: User
  Match: Match!
  Roster: Team
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Date custom scalar type"""
scalar Date

type OrganizationInvitation {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  organizationId: String!
  userId: String!
  Organization: Organization!
  User: User!
}

type OrganizationMembership {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  organizationId: String!
  userId: String!
  role: OrganizationRole!
  Organization: Organization!
  User: User!
}

enum OrganizationRole {
  Owner
  Manager
  Member
}

type Organization {
  uuid: ID!
  name: String!
  tag: String!
  description: String
  createdAt: Date!
  updatedAt: Date!
  ownerId: String!
  Admin: User!
  OrganizationMembership: [OrganizationMembership!]
  OrganizationInvitation: [OrganizationInvitation!]
  Teams: [Team!]
}

type RosterLogEntry {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  type: String!
  extraData: JSON
  createdById: String!
  targetUserId: String
  rosterId: Int!
  CreatedBy: User!
  TargetUser: User
  Roster: Roster!
}

type RosterMembership {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  rosterId: Int!
  userId: String!
  Roster: Roster!
  User: User!
}

type Roster {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  teamId: String!
  divisionGroupId: Int
  DivisionGroup: DivisionGroup
  Team: Team!
  RosterMembership: [RosterMembership!]
  RosterLogEntry: [RosterLogEntry!]
}

type TeamInviteCode {
  id: ID!
  createdAt: Date!
  teamId: String!
  team: Team!
  code: String!
}

type TeamMembership {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  teamId: String!
  userId: String!
  role: UserRole!
  Team: Team!
  User: User!
}

enum UserRole {
  Owner
  Admin
  Staff
  Redaktion
  Developer
  Streamer
  User
  Banned
  Gast
}

type Team {
  uuid: ID!
  name: String
  image: String
  tag: String
  identifier: String!
  description: String
  createdAt: Date!
  updatedAt: Date!
  ownerId: String
  leaderId: String
  coleaderId: String
  divisionId: Int
  divisionGroupId: Int
  organizationId: String
  Admin: User
  Leader: User
  Coleader: User
  TeamMembership: [TeamMembership!]
  TeamInvitation: [TeamInviteCode!]
  Roster: [Roster!]
  SeasonRegistration: [SeasonRegistration!]
  Division: Division
  DivisionGroup: DivisionGroup
  Organization: Organization
  Home: [Match!]
  Away: [Match!]
  Winner: [Match!]
  MatchLogEntry: [MatchLogEntry!]
}

type SeasonRegistration {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  seasonId: Int!
  teamId: String!
  isValid: Boolean
  isCanceled: Boolean
  Season: Season!
  Team: Team!
}

type Season {
  id: ID!
  name: String!
  createdAt: Date!
  updatedAt: Date!
  publicationDate: Date
  registrationStart: Date
  registrationEnd: Date
  leagueStart: Date
  leagueEnd: Date
  matchWeekLength: Int
  SeasonRegistration: [SeasonRegistration!]
  Division: [Division!]
}

type Division {
  id: ID!
  name: String!
  seasonId: Int!
  order: Int
  numberOfRounds: Int
  createdAt: Date!
  updatedAt: Date!
  Season: Season!
  Team: [Team!]
  DivisionGroup: [DivisionGroup!]
}

type DivisionGroup {
  id: ID!
  name: String!
  divisionId: Int!
  order: Int
  createdAt: Date!
  updatedAt: Date!
  Division: Division!
  Roster: [Roster!]
  Match: [Match!]
  Team: [Team!]
}

type Match {
  id: ID!
  identifier: String
  week: Int!
  createdAt: Date!
  updatedAt: Date!
  matchDate: Date
  acceptedByHome: Boolean
  acceptedByAway: Boolean
  scoreHome: Int
  scoreAway: Int
  defwin: Boolean
  approvedByHome: Boolean!
  approvedByAway: Boolean!
  winnerId: String
  divisionGroupId: Int!
  rosterHomeId: String!
  rosterAwayId: String!
  DivisionGroup: DivisionGroup!
  RosterHome: Team!
  RosterAway: Team!
  Winner: Team
  MatchLogEntry: [MatchLogEntry!]
  Chat: [MatchChatEntry!]
}

type MatchChatEntry {
  id: ID!
  createdAt: Date!
  userId: String!
  matchId: Int!
  Content: String!
  User: User!
  Match: Match!
}

type DeletedUser {
  id: ID!
  username: String!
  userId: String!
  User: User!
}

type EpicGames {
  id: ID!
  token: String!
  name: String!
  email: String!
  userId: String
  User: User
}

type Local {
  id: ID!
  email: String!
  password: String!
  userId: String
  User: User
}

type User {
  uuid: ID!
  username: String!
  firstName: String
  lastName: String
  local: Local
  epicGames: EpicGames
  epicId: String
  image: String
  role: UserRole
  isVerified: Boolean
  isActive: Boolean
  isLocked: Boolean
  resetPasswordToken: String
  resetPasswordExpires: Float
  passwordResetFlag: Boolean
  updatedAt: Date!
  createdAt: Date!
  IsTeamOwnerFrom: [Team!]
  IsTeamLeaderFrom: Team
  IsTeamCoLeaderFrom: Team
  IsOrgOwnerFrom: Organization
  TeamMembership: [TeamMembership!]
  RosterMembership: [RosterMembership!]
  RosterLogEntryCreated: [RosterLogEntry!]
  RosterLogEntryTarget: [RosterLogEntry!]
  MatchLogEntryCreated: [MatchLogEntry!]
  MatchLogEntryTarget: [MatchLogEntry!]
  OrganizationMembership: [OrganizationMembership!]
  OrganizationInvitation: [OrganizationInvitation!]
  DeletedUser: [DeletedUser!]
  Chat: [MatchChatEntry!]
  Email: [Email!]
}

type Email {
  id: ID!
  userId: String!
  type: EmailType!
  isOpened: Boolean
  createdAt: Date!
  updatedAt: Date!
  User: User!
}

enum EmailType {
  VERIFY_EMAIL
  FORGOT_PASSWORD
}

type LoginResponse {
  accessToken: String!
  refreshToken: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  image: String!
  username: String!
  updatedAt: Date!
  createdAt: Date!
}

type Query {
  me: User!
  users: [User!]!
  user(username: String!): User
  checkUsernameAvailibility(username: String!): Boolean!
  checkEmailAvailibility(email: String!): Boolean!
  teams: [Team!]!
  team(id: Int!): Team!
  seasons: [Season!]!
  season(id: Int!): Season!
  seasonRegistrations: [SeasonRegistration!]!
  seasonRegistration(id: Int!): SeasonRegistration!
  rosters: [Roster!]!
  roster(id: Int!): Roster!
  posts: [Post!]!
  post(id: Int!): Post!
  matches: [Match!]!
  match(id: Int!): Match!
  divisions: [Division!]!
  division(id: Int!): Division!
  divisionGroups: [DivisionGroup!]!
  divisionGroup(id: Int!): DivisionGroup!
  organizations: [Organization!]!
  organization(id: Int!): Organization!
}

type Mutation {
  createUser(userCreateInput: UserCreateInput!): User!
  updateUser(userUpdateInput: UserUpdateInput!, uuid: String!): Boolean!
  updateAvatar(file: String!, uuid: String!): Boolean!
  removeUser(uuid: String!): User!
  verifyEmail(emailToken: String!): Boolean!
  login(loginInput: LoginInput!): LoginResponse!
  changePassword(changePasswordDto: ChangePasswordInput!): Boolean!
  forgotPassword(forgotPasswordDto: ForgotPasswordInput!): Boolean!
  resetPassword(resetPassword: ResetPasswordInput!): Boolean!
  createEmail(createEmailInput: CreateEmailInput!): Email!
  openEmail(id: Float!): Boolean!
  createTeam(createTeamInput: CreateTeamInput!): Team!
  updateTeam(updateTeamInput: UpdateTeamInput!): Team!
  removeTeam(id: Int!): Team!
  createSeason(createSeasonInput: CreateSeasonInput!): Season!
  updateSeason(updateSeasonInput: UpdateSeasonInput!): Season!
  removeSeason(id: Int!): Season!
  createSeasonRegistration(createSeasonRegistrationInput: CreateSeasonRegistrationInput!): SeasonRegistration!
  updateSeasonRegistration(updateSeasonRegistrationInput: UpdateSeasonRegistrationInput!): SeasonRegistration!
  removeSeasonRegistration(id: Int!): SeasonRegistration!
  createRoster(createRosterInput: CreateRosterInput!): Roster!
  updateRoster(updateRosterInput: UpdateRosterInput!): Roster!
  removeRoster(id: Int!): Roster!
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(id: Int!): Post!
  createMatch(createMatchInput: CreateMatchInput!): Match!
  updateMatch(updateMatchInput: UpdateMatchInput!): Match!
  removeMatch(id: Int!): Match!
  createDivision(createDivisionInput: CreateDivisionInput!): Division!
  updateDivision(updateDivisionInput: UpdateDivisionInput!): Division!
  removeDivision(id: Int!): Division!
  createDivisionGroup(createDivisionGroupInput: CreateDivisionGroupInput!): DivisionGroup!
  updateDivisionGroup(updateDivisionGroupInput: UpdateDivisionGroupInput!): DivisionGroup!
  removeDivisionGroup(id: Int!): DivisionGroup!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!): Organization!
  removeOrganization(id: Int!): Organization!
}

input UserCreateInput {
  username: String!
  updatedAt: Date
  createdAt: Date
  email: String!
  password: String!
}

input UserUpdateInput {
  username: String
  image: String
  epicId: String
  firstName: String
  lastName: String
}

input LoginInput {
  email: String!
  password: String!
}

input ChangePasswordInput {
  username: String!
  pinCode: Float!
  oldPassword: String!
  newPassword: String!
}

input ForgotPasswordInput {
  username: String!
  pinCode: Float!
  newPassword: String!
}

input ResetPasswordInput {
  resetPasswordToken: String!
  password: String!
}

input CreateEmailInput {
  userId: String!
  type: EmailType!
}

input CreateTeamInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateTeamInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateSeasonInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSeasonInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateSeasonRegistrationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSeasonRegistrationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateRosterInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateRosterInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreatePostInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdatePostInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateMatchInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateMatchInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateDivisionInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateDivisionInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateDivisionGroupInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateDivisionGroupInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input CreateOrganizationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateOrganizationInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}
